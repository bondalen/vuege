#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç GitHub API
"""

import os
import requests

def test_github_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç GitHub API —Å —Ç–æ–∫–µ–Ω–æ–º"""
    token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
    
    if not token:
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub API —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        response = requests.get('https://api.github.com/user', headers=headers)
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']}")
            print(f"   ‚úÖ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚úÖ Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        response = requests.get('https://api.github.com/user/repos', headers=headers)
        
        if response.status_code == 200:
            repos = response.json()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            for i, repo in enumerate(repos[:5]):
                print(f"   - {repo['full_name']} ({repo['private'] and 'private' or 'public'})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è vuege...")
        response = requests.get('https://api.github.com/repos/bondalen/vuege', headers=headers)
        
        if response.status_code == 200:
            repo_data = response.json()
            print(f"   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_data['full_name']}")
            print(f"   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {repo_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"   ‚úÖ –ó–≤–µ–∑–¥—ã: {repo_data['stargazers_count']}")
            print(f"   ‚úÖ –§–æ—Ä–∫–∏: {repo_data['forks_count']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_github_api()