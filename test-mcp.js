#!/usr/bin/env node

import { spawn } from 'child_process';
import { readFileSync } from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const dsn = "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable";

// –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
const mcpServer = spawn('node', ['/home/alex/vuege/dbhub/dist/index.js', '--transport', 'stdio', '--dsn', dsn], {
  stdio: ['pipe', 'pipe', 'pipe']
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
const testQueries = [
  {
    method: "tools/call",
    params: {
      name: "execute_sql",
      arguments: {
        sql: "SELECT * FROM users LIMIT 5;"
      }
    }
  },
  {
    method: "tools/call", 
    params: {
      name: "execute_sql",
      arguments: {
        sql: "SELECT * FROM products WHERE category = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';"
      }
    }
  }
];

let messageId = 1;

function sendMessage(message) {
  const mcpMessage = {
    jsonrpc: "2.0",
    id: messageId++,
    ...message
  };
  
  console.log('–û—Ç–ø—Ä–∞–≤–∫–∞:', JSON.stringify(mcpMessage, null, 2));
  mcpServer.stdin.write(JSON.stringify(mcpMessage) + '\n');
}

function handleResponse(data) {
  try {
    const response = JSON.parse(data.toString());
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
mcpServer.stdout.on('data', handleResponse);
mcpServer.stderr.on('data', (data) => {
  console.log('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.toString());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
mcpServer.on('close', (code) => {
  console.log(`MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
setTimeout(() => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ DBHub...\n');
  
  testQueries.forEach((query, index) => {
    setTimeout(() => {
      console.log(`\nüìù –¢–µ—Å—Ç ${index + 1}:`);
      sendMessage(query);
    }, index * 2000);
  });
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    mcpServer.kill();
    process.exit(0);
  }, 10000);
}, 1000);
