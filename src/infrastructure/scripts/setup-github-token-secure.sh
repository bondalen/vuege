#!/bin/bash

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Personal Access Token
# –í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

set -e

echo "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Personal Access Token"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}‚ÑπÔ∏è  $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
check_existing_token() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞..."
    
    if [ -n "$GITHUB_PERSONAL_ACCESS_TOKEN" ]; then
        log_info "–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        RESPONSE=$(curl -s -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
            https://api.github.com/user)
        
        if echo "$RESPONSE" | grep -q "Bad credentials"; then
            log_warning "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω)"
            return 1
        else
            log_info "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω"
            return 0
        fi
    else
        log_warning "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
setup_logging() {
    LOG_FILE="$HOME/.github-api.log"
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ $LOG_FILE"
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$LOG_FILE" ]; then
        touch "$LOG_FILE"
        echo "$(date): –õ–æ–≥ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω" >> "$LOG_FILE"
    fi
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
    if [ $(wc -l < "$LOG_FILE") -gt 1000 ]; then
        tail -500 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
        log_info "–õ–æ–≥ —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ 500 —Å—Ç—Ä–æ–∫"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–∫–µ–Ω–∞
check_token_permissions() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–∫–µ–Ω–∞..."
    
    RESPONSE=$(curl -s -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
        https://api.github.com/user)
    
    if echo "$RESPONSE" | grep -q "Bad credentials"; then
        log_error "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    REPO_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
        https://api.github.com/repos/bondalen/vuege)
    
    if echo "$REPO_RESPONSE" | grep -q "Not Found"; then
        log_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é bondalen/vuege"
        return 1
    else
        log_info "–î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    fi
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    echo "$(date): –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–∫–µ–Ω–∞ - OK" >> "$HOME/.github-api.log"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ .bashrc –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
    if ! grep -q "GITHUB_PERSONAL_ACCESS_TOKEN" ~/.bashrc; then
        echo "" >> ~/.bashrc
        echo "# GitHub Personal Access Token" >> ~/.bashrc
        echo 'export GITHUB_PERSONAL_ACCESS_TOKEN="YOUR_NEW_TOKEN_HERE"' >> ~/.bashrc
        log_info "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ~/.bashrc"
    else
        log_info "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ ~/.bashrc"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    if [ -f ".env" ]; then
        sed -i 's/GITHUB_PERSONAL_ACCESS_TOKEN=.*/GITHUB_PERSONAL_ACCESS_TOKEN=YOUR_NEW_TOKEN_HERE/' .env
        log_info "–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
test_token() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞..."
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    USER_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
        https://api.github.com/user)
    
    if echo "$USER_RESPONSE" | grep -q "login"; then
        USER_LOGIN=$(echo "$USER_RESPONSE" | grep -o '"login":"[^"]*"' | cut -d'"' -f4)
        log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USER_LOGIN"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
        return 1
    fi
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue..."
    ISSUE_DATA='{"title":"–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞","body":"–≠—Ç–æ—Ç issue —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"}'
    
    ISSUE_RESPONSE=$(curl -s -X POST \
        -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$ISSUE_DATA" \
        https://api.github.com/repos/bondalen/vuege/issues)
    
    if echo "$ISSUE_RESPONSE" | grep -q "number"; then
        ISSUE_NUMBER=$(echo "$ISSUE_RESPONSE" | grep -o '"number":[0-9]*' | cut -d':' -f2)
        log_info "–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π issue #$ISSUE_NUMBER"
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π issue
        CLOSE_DATA='{"state":"closed"}'
        curl -s -X PATCH \
            -H "Authorization: token $GITHUB_PERSONAL_ACCESS_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$CLOSE_DATA" \
            https://api.github.com/repos/bondalen/vuege/issues/$ISSUE_NUMBER > /dev/null
        
        log_info "–¢–µ—Å—Ç–æ–≤—ã–π issue #$ISSUE_NUMBER –∑–∞–∫—Ä—ã—Ç"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π issue"
        return 1
    fi
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    echo "$(date): –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ - OK" >> "$HOME/.github-api.log"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "–ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub —Ç–æ–∫–µ–Ω–∞"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if check_existing_token; then
        log_info "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if check_token_permissions; then
            log_info "–ü—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if test_token; then
                log_info "üéâ –¢–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!"
                return 0
            fi
        fi
    fi
    
    log_warning "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω"
    log_info "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:"
    echo ""
    echo "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/settings/tokens"
    echo "2. –ù–∞–∂–º–∏—Ç–µ 'Generate new token (classic)'"
    echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞:"
    echo "   - repo (—Ç–æ–ª—å–∫–æ –¥–ª—è bondalen/vuege)"
    echo "   - user (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"
    echo "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω"
    echo "5. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_NEW_TOKEN_HERE –≤ ~/.bashrc –∏ .env"
    echo "6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    echo ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment
    
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"