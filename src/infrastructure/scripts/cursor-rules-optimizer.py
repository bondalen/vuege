#!/usr/bin/env python3

"""
@file: cursor-rules-optimizer.py
@description: Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç–∞
@pager-protection: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç pager –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
@dependencies: pathlib, re, datetime
@created: 2025-08-20
"""

import os
import sys
import re
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Optional

def setup_pager_protection():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    os.environ['PAGER'] = 'cat'
    os.environ['LESS'] = '-R -M --shift 5'
    os.environ['MORE'] = '-R'
    os.environ['COMPOSER_NO_INTERACTION'] = '1'
    os.environ['TERM'] = 'xterm-256color'
    os.environ['COLUMNS'] = '120'
    os.environ['LINES'] = '30'
    os.environ['GIT_PAGER'] = 'cat'
    os.environ['GIT_EDITOR'] = 'vim'

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
setup_pager_protection()

class CursorRulesOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.current_time = datetime.now()
        
    def analyze_rules_file(self, file_path: str = ".cursorrules") -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª"""
        full_path = self.project_root / file_path
        
        if not full_path.exists():
            return {"error": f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        with open(full_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞
        lines = content.split('\n')
        total_lines = len(lines)
        total_chars = len(content)
        total_bytes = len(content.encode('utf-8'))
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        sections = self._extract_sections(content)
        critical_rules = self._extract_critical_rules(content)
        duplicate_content = self._find_duplicates(content)
        
        return {
            "file_path": str(full_path),
            "size": {
                "lines": total_lines,
                "characters": total_chars,
                "bytes": total_bytes,
                "kilobytes": total_bytes / 1024
            },
            "structure": {
                "sections": sections,
                "critical_rules": critical_rules,
                "duplicates": duplicate_content
            },
            "recommendations": self._generate_recommendations(total_lines, total_bytes, sections)
        }
    
    def _extract_sections(self, content: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª"""
        sections = []
        lines = content.split('\n')
        
        current_section = None
        current_content = []
        
        for i, line in enumerate(lines):
            # –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π
            if line.startswith('## ') or line.startswith('# '):
                if current_section:
                    sections.append({
                        "title": current_section,
                        "start_line": current_section_start,
                        "end_line": i - 1,
                        "lines": len(current_content),
                        "content": '\n'.join(current_content)
                    })
                
                current_section = line.strip('# ').strip()
                current_section_start = i + 1
                current_content = []
            elif current_section:
                current_content.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_section:
            sections.append({
                "title": current_section,
                "start_line": current_section_start,
                "end_line": len(lines) - 1,
                "lines": len(current_content),
                "content": '\n'.join(current_content)
            })
        
        return sections
    
    def _extract_critical_rules(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª"""
        critical_patterns = [
            r'üö®.*?–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï.*?–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï.*?',
            r'–ù–ò–ö–û–ì–î–ê.*?–Ω–µ –≤—ã–ø–æ–ª–Ω—è–π.*?',
            r'–í–°–ï–ì–î–ê.*?–¥–æ–±–∞–≤–ª—è–π.*?',
            r'–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û.*?',
            r'–ö–†–ò–¢–ò–ß–ï–°–ö–ò.*?–í–ê–ñ–ù–û.*?'
        ]
        
        critical_rules = []
        for pattern in critical_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
            critical_rules.extend(matches)
        
        return critical_rules
    
    def _find_duplicates(self, content: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        lines = content.split('\n')
        duplicates = []
        
        # –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤
        for i in range(len(lines) - 5):
            block = '\n'.join(lines[i:i+5])
            if len(block.strip()) > 20:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏
                count = content.count(block)
                if count > 1:
                    duplicates.append({
                        "block": block[:100] + "..." if len(block) > 100 else block,
                        "count": count,
                        "first_occurrence": i
                    })
        
        return duplicates
    
    def _generate_recommendations(self, lines: int, bytes: int, sections: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if lines > 300:
            recommendations.append(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({lines} —Å—Ç—Ä–æ–∫). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 200-300 —Å—Ç—Ä–æ–∫")
        
        if bytes > 50 * 1024:  # 50KB
            recommendations.append(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä ({bytes/1024:.1f}KB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 30-50KB")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if len(sections) < 3:
            recommendations.append("‚ö†Ô∏è –ú–∞–ª–æ —Å–µ–∫—Ü–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
        critical_sections = [s for s in sections if '–∫—Ä–∏—Ç–∏—á' in s['title'].lower()]
        if not critical_sections:
            recommendations.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
        if lines > 200:
            recommendations.append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∞–≤–∏–ª")
            recommendations.append("‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            recommendations.append("‚úÖ –°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–æ–¥—É–ª–∏")
        
        return recommendations
    
    def create_optimized_structure(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª"""
        structure = {
            "main_file": {
                "name": ".cursorrules",
                "target_size": "200-300 —Å—Ç—Ä–æ–∫",
                "content": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ + —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—É–ª–∏"
            },
            "modules": [
                {
                    "name": ".cursorrules-critical",
                    "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "status": "–°–æ–∑–¥–∞–Ω"
                },
                {
                    "name": ".cursorrules-development",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "status": "–°–æ–∑–¥–∞–Ω"
                },
                {
                    "name": ".cursorrules-documentation",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                {
                    "name": ".cursorrules-automation",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                {
                    "name": ".cursorrules-mcp",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                {
                    "name": ".cursorrules-terminal",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                {
                    "name": ".cursorrules-git",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Git",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                {
                    "name": ".cursorrules-python",
                    "description": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Python",
                    "status": "–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è"
                }
            ]
        }
        
        return structure
    
    def generate_optimization_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        analysis = self.analyze_rules_file()
        
        if "error" in analysis:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        structure = self.create_optimized_structure()
        
        report = f"""
üîç –û–¢–ß–ï–¢ –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –§–ê–ô–õ–ê –ü–†–ê–í–ò–õ
–î–∞—Ç–∞: {self.current_time.strftime('%Y-%m-%d %H:%M:%S')}

üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –§–ê–ô–õ–ê:
   –§–∞–π–ª: {analysis['file_path']}
   –†–∞–∑–º–µ—Ä: {analysis['size']['lines']} —Å—Ç—Ä–æ–∫, {analysis['size']['kilobytes']:.1f}KB
   –°–µ–∫—Ü–∏–π: {len(analysis['structure']['sections'])}
   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª: {len(analysis['structure']['critical_rules'])}

üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        for rec in analysis['recommendations']:
            report += f"   {rec}\n"
        
        report += f"""
üèóÔ∏è –ü–†–ï–î–õ–ê–ì–ê–ï–ú–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:

üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {structure['main_file']['name']}
   –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {structure['main_file']['target_size']}
   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {structure['main_file']['content']}

üì¶ –ú–æ–¥—É–ª–∏:
"""
        
        for module in structure['modules']:
            status_icon = "‚úÖ" if module['status'] == "–°–æ–∑–¥–∞–Ω" else "‚è≥"
            report += f"   {status_icon} {module['name']} - {module['description']} ({module['status']})\n"
        
        report += f"""
üéØ –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:

1. –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (.cursorrules-optimized)
2. –†–∞–∑–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –º–æ–¥—É–ª—è–º
3. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å Cursor AI
5. –í–Ω–µ–¥—Ä–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

üìà –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
   - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ 60-70%
   - –ü–æ–ª–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Cursor AI
   - –ú–æ–¥—É–ª—å–Ω–∞—è –∏ –≥–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
   - –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = CursorRulesOptimizer()
    
    print("=== CURSOR RULES OPTIMIZER ===")
    print(optimizer.generate_optimization_report())

if __name__ == "__main__":
    main()
