#!/bin/bash

# =============================================================================
# –°–ö–†–ò–ü–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ï–ö–¢–ê VUEGE
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
# =============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.." && pwd)"
MAX_SIZE="100M"
MAX_FILES="1000"
MAX_GIT_SIZE="50M"
CRITICAL_SIZE="500M"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
get_size_bytes() {
    local size_str="$1"
    if [[ $size_str == *"M" ]]; then
        echo $(( ${size_str%M} * 1024 * 1024 ))
    elif [[ $size_str == *"G" ]]; then
        echo $(( ${size_str%G} * 1024 * 1024 * 1024 ))
    elif [[ $size_str == *"K" ]]; then
        echo $(( ${size_str%K} * 1024 ))
    else
        echo $(( size_str * 1024 ))
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–π—Ç–æ–≤ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
format_bytes() {
    local bytes="$1"
    if [ $bytes -gt 1073741824 ]; then
        echo "$((bytes / 1073741824))G"
    elif [ $bytes -gt 1048576 ]; then
        echo "$((bytes / 1048576))M"
    elif [ $bytes -gt 1024 ]; then
        echo "$((bytes / 1024))K"
    else
        echo "${bytes}B"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    echo "üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ï–ö–¢–ê VUEGE"
    echo "=========================="
    echo "–ü—Ä–æ–µ–∫—Ç: $PROJECT_ROOT"
    echo "–î–∞—Ç–∞: $(date)"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    local project_size=$(du -sh "$PROJECT_ROOT" 2>/dev/null | cut -f1)
    local project_size_bytes=$(du -sb "$PROJECT_ROOT" 2>/dev/null | cut -f1)
    local max_size_bytes=$(get_size_bytes "$MAX_SIZE")
    local critical_size_bytes=$(get_size_bytes "$CRITICAL_SIZE")
    
    echo "üìä –†–ê–ó–ú–ï–† –ü–†–û–ï–ö–¢–ê:"
    echo "  –¢–µ–∫—É—â–∏–π: $project_size"
    echo "  –õ–∏–º–∏—Ç: $MAX_SIZE"
    echo "  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: $CRITICAL_SIZE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    local file_count=$(find "$PROJECT_ROOT" -type f 2>/dev/null | wc -l)
    echo ""
    echo "üìÅ –ö–û–õ–ò–ß–ï–°–¢–í–û –§–ê–ô–õ–û–í:"
    echo "  –¢–µ–∫—É—â–µ–µ: $file_count"
    echo "  –õ–∏–º–∏—Ç: $MAX_FILES"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [ -d "$PROJECT_ROOT/.git" ]; then
        local git_size=$(du -sh "$PROJECT_ROOT/.git" 2>/dev/null | cut -f1)
        local git_size_bytes=$(du -sb "$PROJECT_ROOT/.git" 2>/dev/null | cut -f1)
        local max_git_bytes=$(get_size_bytes "$MAX_GIT_SIZE")
        
        echo ""
        echo "üîß GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–ô:"
        echo "  –†–∞–∑–º–µ—Ä .git: $git_size"
        echo "  –õ–∏–º–∏—Ç: $MAX_GIT_SIZE"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
        local staged_files=$(git -C "$PROJECT_ROOT" status --porcelain 2>/dev/null | wc -l)
        echo "  –§–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞: $staged_files"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo ""
    echo "üìà –ê–ù–ê–õ–ò–ó –ö–†–£–ü–ù–´–• –î–ò–†–ï–ö–¢–û–†–ò–ô:"
    local large_dirs=(
        "venv"
        "src/app/frontend/node_modules"
        "src/app/target"
        "mcp_cache"
        "src/app/frontend/dist"
        ".git"
    )
    
    for dir in "${large_dirs[@]}"; do
        local full_path="$PROJECT_ROOT/$dir"
        if [ -d "$full_path" ]; then
            local size=$(du -sh "$full_path" 2>/dev/null | cut -f1)
            local count=$(find "$full_path" -type f 2>/dev/null | wc -l)
            printf "  %-25s %8s (%6s —Ñ–∞–π–ª–æ–≤)\n" "$dir" "$size" "$count"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    echo ""
    echo "üìã –ü–†–û–í–ï–†–ö–ê .GITIGNORE:"
    if [ -f "$PROJECT_ROOT/.gitignore" ]; then
        local ignored_dirs=("venv" "node_modules" "target" "mcp_cache" ".vscode" ".cursor")
        for dir in "${ignored_dirs[@]}"; do
            if grep -q "^$dir/" "$PROJECT_ROOT/.gitignore" 2>/dev/null || grep -q "^$dir$" "$PROJECT_ROOT/.gitignore" 2>/dev/null; then
                log_success "$dir/ –≤ .gitignore"
            else
                log_warning "$dir/ –ù–ï –≤ .gitignore"
            fi
        done
    else
        log_error ".gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo ""
    echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:"
    
    local has_warnings=false
    local has_errors=false
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if [ $project_size_bytes -gt $critical_size_bytes ]; then
        log_error "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–í–´–®–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê: $project_size > $CRITICAL_SIZE"
        has_errors=true
    elif [ $project_size_bytes -gt $max_size_bytes ]; then
        log_warning "–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –†–ê–ó–ú–ï–†–ê: $project_size > $MAX_SIZE"
        has_warnings=true
    else
        log_success "–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    if [ $file_count -gt $MAX_FILES ]; then
        log_warning "–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –§–ê–ô–õ–û–í: $file_count > $MAX_FILES"
        has_warnings=true
    else
        log_success "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ Git
    if [ -d "$PROJECT_ROOT/.git" ] && [ $git_size_bytes -gt $max_git_bytes ]; then
        log_warning "–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ GIT: $git_size > $MAX_GIT_SIZE"
        has_warnings=true
    fi
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo ""
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
    
    if [ "$has_errors" = true ]; then
        echo "  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø!"
        echo "  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./src/infrastructure/scripts/project-cleanup.sh"
        echo "  –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é 3 (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞)"
        exit 1
    elif [ "$has_warnings" = true ]; then
        echo "  ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –û–ß–ò–°–¢–ö–ê"
        echo "  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./src/infrastructure/scripts/project-cleanup.sh"
        echo "  –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é 2 (–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)"
        exit 1
    else
        echo "  ‚úÖ –ü—Ä–æ–µ–∫—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
        echo "  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    local report_file="$PROJECT_ROOT/project-monitor-report-$(date +%Y%m%d-%H%M%S).txt"
    {
        echo "–û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ï–ö–¢–ê VUEGE"
        echo "–î–∞—Ç–∞: $(date)"
        echo "–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: $project_size"
        echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $file_count"
        echo "–°—Ç–∞—Ç—É—Å: $([ "$has_errors" = true ] && echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" || [ "$has_warnings" = true ] && echo "–¢–†–ï–ë–£–ï–¢ –û–ß–ò–°–¢–ö–ò" || echo "–û–¢–õ–ò–ß–ù–´–ô")"
    } > "$report_file"
    
    log_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main "$@"