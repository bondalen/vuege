#!/usr/bin/env python3
"""
@file: setup-mcp-tokens.py
@description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
@created: 2025-08-21
"""

import os
import sys
from pathlib import Path

def setup_github_token():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞"""
    print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Personal Access Token")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–æ–∫–µ–Ω–æ–≤
    token_file = Path.home() / ".cursor" / "mcp.env"
    
    if not token_file.exists():
        print(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_file}")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(token_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
    if "YOUR_ACTUAL_GITHUB_TOKEN_HERE" in content:
        print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/settings/tokens")
        print("2. –ù–∞–∂–º–∏—Ç–µ 'Generate new token (classic)'")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ scopes: repo, workflow, user")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
        print("\nüîß –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª:")
        print(f"   nano {token_file}")
        print("   –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ACTUAL_GITHUB_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüéØ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        token = input("GitHub Token: ").strip()
        
        if token and token.startswith('ghp_'):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º
            new_content = content.replace(
                "GITHUB_PERSONAL_ACCESS_TOKEN=YOUR_ACTUAL_GITHUB_TOKEN_HERE",
                f"GITHUB_PERSONAL_ACCESS_TOKEN={token}"
            )
            
            with open(token_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ GitHub —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return True
        else:
            print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False
    else:
        print("‚úÖ GitHub —Ç–æ–∫–µ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True

def load_tokens():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    token_file = Path.home() / ".cursor" / "mcp.env"
    
    if not token_file.exists():
        print("‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    with open(token_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {key}")
    
    return True

def test_github_token():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞...")
    
    token = os.environ.get('GITHUB_PERSONAL_ACCESS_TOKEN')
    
    if not token or token == 'YOUR_ACTUAL_GITHUB_TOKEN_HERE':
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        import requests
        
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        response = requests.get(
            'https://api.github.com/user',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            user_info = response.json()
            print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['login']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ GitHub API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
    github_ok = setup_github_token()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    load_ok = load_tokens()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if github_ok and load_ok:
        test_ok = test_github_token()
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  GitHub —Ç–æ–∫–µ–Ω: {'‚úÖ' if test_ok else '‚ùå'}")
        print(f"  –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {'‚úÖ' if load_ok else '‚ùå'}")
        
        if test_ok:
            print("\nüéâ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
            print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤:")
            print("   python src/infrastructure/scripts/test-mcp-servers.py")
        else:
            print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()