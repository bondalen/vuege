#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GitHub API Wrapper
–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ù–ï–¢ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤!
"""

import os
import sys
import json
import requests
from typing import Dict, Any, Optional

class SafeGitHubWrapper:
    def __init__(self):
        self.token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
        if not self.token:
            print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        
        self.base_url = 'https://api.github.com'
        self.headers = {
            'Authorization': f'token {self.token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_file = os.path.expanduser('~/.github-safe-api.log')
        self.log_activity("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GitHub wrapper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def log_activity(self, message: str, level: str = "INFO"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} [{level}] {message}"
        
        with open(self.log_file, 'a') as f:
            f.write(log_entry + '\n')
    
    def get_user_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ë–ï–ó–û–ü–ê–°–ù–û)"""
        self.log_activity("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        
        response = requests.get(f'{self.base_url}/user', headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"GitHub API error: {response.status_code}")
    
    def list_commits(self, owner: str, repo: str, limit: int = 5) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ (–ë–ï–ó–û–ü–ê–°–ù–û)"""
        self.log_activity(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {owner}/{repo}")
        
        response = requests.get(
            f'{self.base_url}/repos/{owner}/{repo}/commits',
            headers=self.headers,
            params={'per_page': limit}
        )
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"GitHub API error: {response.status_code}")
    
    def create_issue(self, owner: str, repo: str, title: str, body: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å issue (–ë–ï–ó–û–ü–ê–°–ù–û)"""
        self.log_activity(f"–°–æ–∑–¥–∞–Ω–∏–µ issue –≤ {owner}/{repo}")
        
        data = {
            'title': title,
            'body': body
        }
        response = requests.post(
            f'{self.base_url}/repos/{owner}/{repo}/issues',
            headers=self.headers,
            json=data
        )
        if response.status_code == 201:
            return response.json()
        else:
            raise Exception(f"GitHub API error: {response.status_code}")
    
    def add_issue_comment(self, owner: str, repo: str, issue_number: int, body: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ issue (–ë–ï–ó–û–ü–ê–°–ù–û)"""
        self.log_activity(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ issue #{issue_number}")
        
        data = {'body': body}
        response = requests.post(
            f'{self.base_url}/repos/{owner}/{repo}/issues/{issue_number}/comments',
            headers=self.headers,
            json=data
        )
        if response.status_code == 201:
            return response.json()
        else:
            raise Exception(f"GitHub API error: {response.status_code}")
    
    def list_repositories(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–ë–ï–ó–û–ü–ê–°–ù–û)"""
        self.log_activity("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        
        response = requests.get(f'{self.base_url}/user/repos', headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"GitHub API error: {response.status_code}")

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ wrapper"""
    print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ GitHub wrapper")
    print("=" * 50)
    
    try:
        wrapper = SafeGitHubWrapper()
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_info = wrapper.get_user_info()
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['login']}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        repos = wrapper.list_repositories()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue
        print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue...")
        issue = wrapper.create_issue(
            'bondalen', 
            'vuege', 
            '–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ wrapper', 
            '–≠—Ç–æ—Ç issue —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π wrapper (–ù–ï–¢ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤)'
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω issue #{issue['number']}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π wrapper —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()