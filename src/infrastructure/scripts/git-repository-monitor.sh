#!/bin/bash

# @file: git-repository-monitor.sh
# @description: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞–∑–¥—É–≤–∞–Ω–∏—è
# @pager-protection: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç pager –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
# @dependencies: git, du, find
# @created: 2025-08-20
# @updated: 2025-08-25 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager
export PAGER=cat
export LESS="-R -M --shift 5"
export MORE="-R"
export COMPOSER_NO_INTERACTION=1
export TERM=xterm-256color
export COLUMNS=120
export LINES=30
export GIT_PAGER=cat
export GIT_EDITOR=vim

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git pager –≥–ª–æ–±–∞–ª—å–Ω–æ
git config --global core.pager cat 2>/dev/null

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
REPO_SIZE_LIMIT_MB=100
GIT_SIZE_LIMIT_MB=50
FILES_LIMIT=1000
CRITICAL_SIZE_MB=500

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
get_size_bytes() {
    local size_str="$1"
    if [[ $size_str == *"M" ]]; then
        echo $(( ${size_str%M} * 1024 * 1024 ))
    elif [[ $size_str == *"G" ]]; then
        echo $(( ${size_str%G} * 1024 * 1024 * 1024 ))
    elif [[ $size_str == *"K" ]]; then
        echo $(( ${size_str%K} * 1024 ))
    else
        echo $(( size_str * 1024 ))
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–π—Ç–æ–≤ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
format_bytes() {
    local bytes="$1"
    if [ $bytes -gt 1073741824 ]; then
        echo "$((bytes / 1073741824))G"
    elif [ $bytes -gt 1048576 ]; then
        echo "$((bytes / 1048576))M"
    elif [ $bytes -gt 1024 ]; then
        echo "$((bytes / 1024))K"
    else
        echo "${bytes}B"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
analyze_repository_size() {
    echo "üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:"
    repo_size_mb=$(du -sm . | cut -f1)
    echo "   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${repo_size_mb}MB"
    
    local repo_size_bytes=$((repo_size_mb * 1024 * 1024))
    local limit_bytes=$((REPO_SIZE_LIMIT_MB * 1024 * 1024))
    local critical_bytes=$((CRITICAL_SIZE_MB * 1024 * 1024))
    
    if [ "$repo_size_bytes" -gt "$critical_bytes" ]; then
        echo -e "   ${RED}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–í–´–®–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç ${CRITICAL_SIZE_MB}MB${NC}"
        return 2
    elif [ "$repo_size_bytes" -gt "$limit_bytes" ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${REPO_SIZE_LIMIT_MB}MB${NC}"
        return 1
    else
        echo -e "   ${GREEN}‚úÖ –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –Ω–æ—Ä–º–µ${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ .git
analyze_git_size() {
    if [ -d ".git" ]; then
        git_size_mb=$(du -sm .git | cut -f1)
        echo "   –†–∞–∑–º–µ—Ä .git: ${git_size_mb}MB"
        
        local git_size_bytes=$((git_size_mb * 1024 * 1024))
        local limit_bytes=$((GIT_SIZE_LIMIT_MB * 1024 * 1024))
        
        if [ "$git_size_bytes" -gt "$limit_bytes" ]; then
            echo -e "   ${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä .git –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${GIT_SIZE_LIMIT_MB}MB${NC}"
            return 1
        else
            echo -e "   ${GREEN}‚úÖ –†–∞–∑–º–µ—Ä .git –≤ –Ω–æ—Ä–º–µ${NC}"
            return 0
        fi
    else
        echo -e "   ${YELLOW}‚ö†Ô∏è  .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
analyze_staged_files() {
    echo ""
    echo "üìÅ –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –î–õ–Ø –ö–û–ú–ú–ò–¢–ê:"
    files_count=$(git status --porcelain | wc -l)
    echo "   –§–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞: ${files_count}"
    
    if [ "$files_count" -gt "$FILES_LIMIT" ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${FILES_LIMIT}${NC}"
        return 1
    else
        echo -e "   ${GREEN}‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
analyze_problematic_directories() {
    echo ""
    echo "üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –î–ò–†–ï–ö–¢–û–†–ò–ô:"
    problematic_dirs=("venv" "node_modules" "mcp_cache" ".git" "__pycache__" "target" "dist")
    local has_problems=false
    
    for dir in "${problematic_dirs[@]}"; do
        if [ -d "$dir" ]; then
            dir_size_mb=$(du -sm "$dir" 2>/dev/null | cut -f1)
            echo "   ${dir}/: ${dir_size_mb}MB"
            
            if [ "$dir_size_mb" -gt 10 ]; then
                echo -e "   ${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ${dir}/ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π${NC}"
                has_problems=true
            fi
        fi
    done
    
    if [ "$has_problems" = true ]; then
        return 1
    else
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ .gitignore
check_gitignore() {
    echo ""
    echo "üìã –ü–†–û–í–ï–†–ö–ê .GITIGNORE:"
    if [ -f ".gitignore" ]; then
        echo "   .gitignore –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        key_exclusions=("venv/" "node_modules/" "mcp_cache/" ".git/" "target/" "dist/")
        missing_exclusions=()
        
        for exclusion in "${key_exclusions[@]}"; do
            if ! grep -q "^${exclusion}" .gitignore; then
                missing_exclusions+=("$exclusion")
            fi
        done
        
        if [ ${#missing_exclusions[@]} -eq 0 ]; then
            echo -e "   ${GREEN}‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç${NC}"
            return 0
        else
            echo -e "   ${YELLOW}‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${missing_exclusions[*]}${NC}"
            return 1
        fi
    else
        echo -e "   ${RED}‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
create_report() {
    local report_file="git-monitor-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "–û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
        echo "–î–∞—Ç–∞: $(date)"
        echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(pwd)"
        echo ""
        echo "–†–ê–ó–ú–ï–† –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:"
        echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${repo_size_mb}MB"
        echo "  –†–∞–∑–º–µ—Ä .git: ${git_size_mb}MB"
        echo "  –§–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞: ${files_count}"
        echo ""
        echo "–ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ò–†–ï–ö–¢–û–†–ò–ò:"
        for dir in "${problematic_dirs[@]}"; do
            if [ -d "$dir" ]; then
                dir_size_mb=$(du -sm "$dir" 2>/dev/null | cut -f1)
                echo "  ${dir}/: ${dir_size_mb}MB"
            fi
        done
        echo ""
        echo "–°–¢–ê–¢–£–°: $([ "$has_critical_issues" = true ] && echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" || [ "$has_warnings" = true ] && echo "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø" || echo "–û–¢–õ–ò–ß–ù–´–ô")"
    } > "$report_file"
    
    log_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
show_recommendations() {
    echo ""
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
    
    if [ "$has_critical_issues" = true ]; then
        echo -e "   ${RED}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ${NC}"
        echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./src/infrastructure/scripts/project-maintenance.sh --critical-cleanup"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .gitignore –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        echo "   - –£–¥–∞–ª–∏—Ç–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: git filter-branch"
        echo "   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Git LFS –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    elif [ "$has_warnings" = true ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï${NC}"
        echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./src/infrastructure/scripts/project-maintenance.sh --safe-cleanup"
        echo "   - –û–±–Ω–æ–≤–∏—Ç–µ .gitignore –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        echo "   - –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ pre-commit hooks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞"
    else
        echo -e "   ${GREEN}‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏${NC}"
        echo "   - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        echo "   - –û–±–Ω–æ–≤–ª—è–π—Ç–µ .gitignore –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./src/infrastructure/scripts/project-maintenance.sh --monitor-only"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
interactive_menu() {
    echo ""
    echo "üéõÔ∏è  –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ú–ï–ù–Æ:"
    echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É"
    echo "3. –û–±–Ω–æ–≤–∏—Ç—å .gitignore"
    echo "4. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    echo "5. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    echo "0. –í—ã—Ö–æ–¥"
    echo ""
    
    read -p "–í–∞—à –≤—ã–±–æ—Ä (0-5): " choice
    
    case $choice in
        1)
            log_info "–ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏..."
            if [ -f "../project-maintenance.sh" ]; then
                bash "../project-maintenance.sh" --safe-cleanup
            else
                log_error "–°–∫—Ä–∏–ø—Ç project-maintenance.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        2)
            log_warning "–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏..."
            if [ -f "../project-maintenance.sh" ]; then
                bash "../project-maintenance.sh" --critical-cleanup
            else
                log_error "–°–∫—Ä–∏–ø—Ç project-maintenance.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        3)
            log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore..."
            if [ -f "../project-maintenance.sh" ]; then
                bash "../project-maintenance.sh" --update-gitignore
            else
                log_error "–°–∫—Ä–∏–ø—Ç project-maintenance.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        4)
            log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
            if [ -f "../project-maintenance.sh" ]; then
                bash "../project-maintenance.sh" --create-monitoring
            else
                log_error "–°–∫—Ä–∏–ø—Ç project-maintenance.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        5)
            show_detailed_analysis
            ;;
        0)
            log "–í—ã—Ö–æ–¥"
            exit 0
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
show_detailed_analysis() {
    echo ""
    echo "üìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
    echo "================================"
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    echo "üîç –ö–†–£–ü–ù–ï–ô–®–ò–ï –§–ê–ô–õ–´:"
    find . -type f -size +1M -exec ls -lh {} \; 2>/dev/null | head -10 | while read line; do
        echo "   $line"
    done
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo ""
    echo "üìÅ –ö–†–£–ü–ù–ï–ô–®–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ò:"
    du -sh */ 2>/dev/null | sort -hr | head -10 | while read line; do
        echo "   $line"
    done
    
    # –ê–Ω–∞–ª–∏–∑ Git –∏—Å—Ç–æ—Ä–∏–∏
    echo ""
    echo "üîß –ê–ù–ê–õ–ò–ó GIT –ò–°–¢–û–†–ò–ò:"
    if [ -d ".git" ]; then
        local commit_count=$(git rev-list --count HEAD 2>/dev/null || echo "0")
        local branch_count=$(git branch -r | wc -l 2>/dev/null || echo "0")
        local tag_count=$(git tag | wc -l 2>/dev/null || echo "0")
        
        echo "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤: $commit_count"
        echo "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–æ–∫: $branch_count"
        echo "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤: $tag_count"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    echo "=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ê–ó–ú–ï–†–ê GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø ==="
    echo "–î–∞—Ç–∞: $(date)"
    echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(pwd)"
    echo ""
    
    local has_critical_issues=false
    local has_warnings=false
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    analyze_repository_size
    case $? in
        2) has_critical_issues=true ;;
        1) has_warnings=true ;;
    esac
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ .git
    analyze_git_size
    if [ $? -eq 1 ]; then
        has_warnings=true
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    analyze_staged_files
    if [ $? -eq 1 ]; then
        has_warnings=true
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    analyze_problematic_directories
    if [ $? -eq 1 ]; then
        has_warnings=true
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    check_gitignore
    if [ $? -eq 1 ]; then
        has_warnings=true
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    create_report
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    show_recommendations
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω–µ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ)
    if [ "${1:-}" != "--no-interactive" ]; then
        interactive_menu
    fi
    
    echo ""
    echo "=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ==="
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    if [ "$has_critical_issues" = true ]; then
        exit 2
    elif [ "$has_warnings" = true ]; then
        exit 1
    else
        exit 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h           –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        echo "  --no-interactive     –ó–∞–ø—É—Å–∫ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        echo "  --detailed           –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        echo ""
        exit 0
        ;;
    --detailed)
        show_detailed_analysis
        exit 0
        ;;
esac

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"