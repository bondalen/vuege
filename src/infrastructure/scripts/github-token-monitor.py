#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GitHub Personal Access Token
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import os
import sys
import json
import time
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

class GitHubTokenMonitor:
    def __init__(self):
        self.token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
        self.base_url = 'https://api.github.com'
        self.headers = {
            'Authorization': f'token {self.token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        self.log_file = os.path.expanduser('~/.github-api.log')
        self.rate_limit_file = os.path.expanduser('~/.github-rate-limit.json')
        
    def log_activity(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} [{level}] {message}"
        
        with open(self.log_file, 'a') as f:
            f.write(log_entry + '\n')
        
        print(f"üìù {log_entry}")
    
    def check_rate_limit(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API"""
        try:
            response = requests.get(f'{self.base_url}/rate_limit', headers=self.headers)
            if response.status_code == 200:
                return response.json()
            else:
                self.log_activity(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {response.status_code}", "ERROR")
                return {}
        except Exception as e:
            self.log_activity(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}", "ERROR")
            return {}
    
    def check_token_validity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            response = requests.get(f'{self.base_url}/user', headers=self.headers)
            
            if response.status_code == 200:
                user_data = response.json()
                self.log_activity(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']}")
                return True
            elif response.status_code == 401:
                self.log_activity("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (401 Bad credentials)", "ERROR")
                return False
            else:
                self.log_activity(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response.status_code}", "WARNING")
                return False
                
        except Exception as e:
            self.log_activity(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}", "ERROR")
            return False
    
    def check_repository_access(self, owner: str, repo: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
        try:
            response = requests.get(f'{self.base_url}/repos/{owner}/{repo}', headers=self.headers)
            
            if response.status_code == 200:
                repo_data = response.json()
                self.log_activity(f"–î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é {owner}/{repo} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                return True
            elif response.status_code == 404:
                self.log_activity(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {owner}/{repo} –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
                return False
            elif response.status_code == 403:
                self.log_activity(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é {owner}/{repo}", "ERROR")
                return False
            else:
                self.log_activity(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {response.status_code}", "WARNING")
                return False
                
        except Exception as e:
            self.log_activity(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}", "ERROR")
            return False
    
    def analyze_usage_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            # –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
            if not os.path.exists(self.log_file):
                return {"error": "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            with open(self.log_file, 'r') as f:
                lines = f.readlines()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            now = datetime.now()
            day_ago = now - timedelta(days=1)
            
            recent_activity = []
            api_calls = 0
            errors = 0
            
            for line in lines:
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    timestamp_str = line[:19]  # "YYYY-MM-DD HH:MM:SS"
                    timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
                    
                    if timestamp >= day_ago:
                        recent_activity.append(line.strip())
                        
                        if "API request" in line:
                            api_calls += 1
                        elif "ERROR" in line:
                            errors += 1
                            
                except ValueError:
                    continue
            
            return {
                "recent_activity_count": len(recent_activity),
                "api_calls_24h": api_calls,
                "errors_24h": errors,
                "recent_activity": recent_activity[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            }
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"}
    
    def check_suspicious_activity(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        analysis = self.analyze_usage_patterns()
        
        if "error" in analysis:
            return analysis
        
        suspicious = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤
        if analysis["api_calls_24h"] > 1000:
            suspicious.append(f"–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {analysis['api_calls_24h']} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ 24 —á–∞—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if analysis["errors_24h"] > 10:
            suspicious.append(f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {analysis['errors_24h']} –æ—à–∏–±–æ–∫ –∑–∞ 24 —á–∞—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        for activity in analysis["recent_activity"]:
            if "delete" in activity.lower() or "remove" in activity.lower():
                suspicious.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}")
        
        return {
            "suspicious_activity": suspicious,
            "analysis": analysis
        }
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("üîç –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê GITHUB TOKEN")
        report.append("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        if self.check_token_validity():
            report.append("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
        else:
            report.append("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            return "\n".join(report)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        if self.check_repository_access("bondalen", "vuege"):
            report.append("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        else:
            report.append("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API
        rate_limit = self.check_rate_limit()
        if rate_limit:
            core = rate_limit.get('resources', {}).get('core', {})
            remaining = core.get('remaining', 0)
            limit = core.get('limit', 0)
            reset_time = datetime.fromtimestamp(core.get('reset', 0))
            
            report.append(f"üìä –õ–∏–º–∏—Ç—ã API: {remaining}/{limit} (—Å–±—Ä–æ—Å: {reset_time.strftime('%H:%M:%S')})")
            
            if remaining < 100:
                report.append("‚ö†Ô∏è  –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å!")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        suspicious = self.check_suspicious_activity()
        if suspicious.get("suspicious_activity"):
            report.append("üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
            for activity in suspicious["suspicious_activity"]:
                report.append(f"   - {activity}")
        else:
            report.append("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        analysis = suspicious.get("analysis", {})
        if "api_calls_24h" in analysis:
            report.append(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:")
            report.append(f"   - API –≤—ã–∑–æ–≤–æ–≤: {analysis['api_calls_24h']}")
            report.append(f"   - –û—à–∏–±–æ–∫: {analysis['errors_24h']}")
        
        report.append("=" * 50)
        report.append(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return "\n".join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN'):
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        sys.exit(1)
    
    monitor = GitHubTokenMonitor()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor.log_activity("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GitHub —Ç–æ–∫–µ–Ω–∞")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    report = monitor.generate_report()
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_file = f"~/github-token-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
    with open(os.path.expanduser(report_file), 'w') as f:
        f.write(report)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")

if __name__ == "__main__":
    main()