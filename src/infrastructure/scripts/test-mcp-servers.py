#!/usr/bin/env python3
"""
@file: test-mcp-servers.py
@description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
@dependencies: requests, json, os, sys, subprocess
@created: 2025-08-21
@pager-protection: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç pager
"""

import json
import os
import sys
import subprocess
import requests
from datetime import datetime
from pathlib import Path

def setup_pager_protection():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager"""
    os.environ['PAGER'] = 'cat'
    os.environ['LESS'] = '-R -M --shift 5'
    os.environ['MORE'] = '-R'
    os.environ['COMPOSER_NO_INTERACTION'] = '1'
    
    try:
        subprocess.run(['git', 'config', '--global', 'core.pager', 'cat'], 
                      capture_output=True, check=True)
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç pager –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pager: {e}")

class MCPServerTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'git_mcp_server': {'status': 'unknown', 'operations': [], 'errors': []},
            'github_mcp_server': {'status': 'unknown', 'operations': [], 'errors': []}
        }
        
    def test_git_mcp_server(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Git MCP Server"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Git MCP Server...")
        
        try:
            # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('status')
            print("‚úÖ –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω")
            
            # –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤
            print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤...")
            result = subprocess.run(['git', 'log', '--oneline', '-5'], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('log')
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ç–∫–∏
            print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ç–∫–∏...")
            branch_name = f"test-mcp-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            result = subprocess.run(['git', 'checkout', '-b', branch_name], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('create_branch')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞: {branch_name}")
            
            # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            print("4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
            test_file = f"test-mcp-{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
            with open(test_file, 'w') as f:
                f.write(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤\n–°–æ–∑–¥–∞–Ω: {datetime.now()}\n")
            self.results['git_mcp_server']['operations'].append('create_file')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
            
            # –¢–µ—Å—Ç 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ git
            print("5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ git...")
            result = subprocess.run(['git', 'add', test_file], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('add_file')
            print("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ git")
            
            # –¢–µ—Å—Ç 6: –ö–æ–º–º–∏—Ç
            print("6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
            result = subprocess.run(['git', 'commit', '-m', f'Test: MCP server testing - {test_file}'], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('commit')
            print("‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ main
            print("7. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ main...")
            result = subprocess.run(['git', 'checkout', 'main'], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('checkout_main')
            print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ main –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
            # –¢–µ—Å—Ç 8: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ç–∫–∏
            print("8. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ç–∫–∏...")
            result = subprocess.run(['git', 'branch', '-D', branch_name], 
                                  capture_output=True, text=True, check=True)
            self.results['git_mcp_server']['operations'].append('delete_branch')
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(test_file):
                os.remove(test_file)
            
            self.results['git_mcp_server']['status'] = 'success'
            print("üéâ Git MCP Server —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except subprocess.CalledProcessError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git –∫–æ–º–∞–Ω–¥—ã: {e.stderr}"
            self.results['git_mcp_server']['errors'].append(error_msg)
            self.results['git_mcp_server']['status'] = 'error'
            print(f"‚ùå {error_msg}")
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.results['git_mcp_server']['errors'].append(error_msg)
            self.results['git_mcp_server']['status'] = 'error'
            print(f"‚ùå {error_msg}")
    
    def test_github_mcp_server(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub MCP Server"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub MCP Server...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        token = os.environ.get('GITHUB_PERSONAL_ACCESS_TOKEN')
        if not token or token == 'YOUR_GITHUB_TOKEN_HERE':
            error_msg = "GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç placeholder"
            self.results['github_mcp_server']['errors'].append(error_msg)
            self.results['github_mcp_server']['status'] = 'error'
            print(f"‚ùå {error_msg}")
            return
        
        try:
            headers = {
                'Authorization': f'token {token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
            response = requests.get(
                'https://api.github.com/repos/bondalen/vuege',
                headers=headers,
                timeout=10
            )
            response.raise_for_status()
            repo_info = response.json()
            self.results['github_mcp_server']['operations'].append('get_repo_info')
            print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_info['name']} ({repo_info['full_name']})")
            
            # –¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
            print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤...")
            response = requests.get(
                'https://api.github.com/repos/bondalen/vuege/commits',
                headers=headers,
                params={'per_page': 5},
                timeout=10
            )
            response.raise_for_status()
            commits = response.json()
            self.results['github_mcp_server']['operations'].append('get_commits')
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(commits)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue
            print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ issue...")
            issue_data = {
                'title': f'Test MCP Server - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
                'body': f'–¢–µ—Å—Ç–æ–≤–æ–µ issue –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub MCP Server\n\n–°–æ–∑–¥–∞–Ω–æ: {datetime.now().isoformat()}\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ issue –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.',
                'labels': ['test', 'mcp-server']
            }
            response = requests.post(
                'https://api.github.com/repos/bondalen/vuege/issues',
                headers=headers,
                json=issue_data,
                timeout=10
            )
            response.raise_for_status()
            issue = response.json()
            issue_number = issue['number']
            self.results['github_mcp_server']['operations'].append('create_issue')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ issue #{issue_number}")
            
            # –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            print("4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ issue...")
            comment_data = {
                'body': f'–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç MCP Server\n\n–í—Ä–µ–º—è: {datetime.now().isoformat()}\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
            }
            response = requests.post(
                f'https://api.github.com/repos/bondalen/vuege/issues/{issue_number}/comments',
                headers=headers,
                json=comment_data,
                timeout=10
            )
            response.raise_for_status()
            self.results['github_mcp_server']['operations'].append('add_comment')
            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
            
            # –¢–µ—Å—Ç 5: –ó–∞–∫—Ä—ã—Ç–∏–µ issue
            print("5. –ó–∞–∫—Ä—ã—Ç–∏–µ issue...")
            close_data = {'state': 'closed'}
            response = requests.patch(
                f'https://api.github.com/repos/bondalen/vuege/issues/{issue_number}',
                headers=headers,
                json=close_data,
                timeout=10
            )
            response.raise_for_status()
            self.results['github_mcp_server']['operations'].append('close_issue')
            print("‚úÖ Issue –∑–∞–∫—Ä—ã—Ç–æ")
            
            self.results['github_mcp_server']['status'] = 'success'
            print("üéâ GitHub MCP Server —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            self.results['github_mcp_server']['errors'].append(error_msg)
            self.results['github_mcp_server']['status'] = 'error'
            print(f"‚ùå {error_msg}")
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.results['github_mcp_server']['errors'].append(error_msg)
            self.results['github_mcp_server']['status'] = 'error'
            print(f"‚ùå {error_msg}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print("=" * 50)
        print(f"–î–∞—Ç–∞: {self.results['timestamp']}")
        
        # Git MCP Server
        print(f"\nüîß Git MCP Server:")
        print(f"  –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if self.results['git_mcp_server']['status'] == 'success' else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"  –û–ø–µ—Ä–∞—Ü–∏–∏: {', '.join(self.results['git_mcp_server']['operations'])}")
        if self.results['git_mcp_server']['errors']:
            print(f"  –û—à–∏–±–∫–∏: {', '.join(self.results['git_mcp_server']['errors'])}")
        
        # GitHub MCP Server
        print(f"\nüêô GitHub MCP Server:")
        print(f"  –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if self.results['github_mcp_server']['status'] == 'success' else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"  –û–ø–µ—Ä–∞—Ü–∏–∏: {', '.join(self.results['github_mcp_server']['operations'])}")
        if self.results['github_mcp_server']['errors']:
            print(f"  –û—à–∏–±–∫–∏: {', '.join(self.results['github_mcp_server']['errors'])}")
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        git_success = self.results['git_mcp_server']['status'] == 'success'
        github_success = self.results['github_mcp_server']['status'] == 'success'
        
        print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        if git_success and github_success:
            print("  –°—Ç–∞—Ç—É—Å: ‚úÖ –í—Å–µ MCP —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif git_success:
            print("  –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è Git MCP Server —Ä–∞–±–æ—Ç–∞–µ—Ç, GitHub MCP Server —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub —Ç–æ–∫–µ–Ω")
        elif github_success:
            print("  –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è GitHub MCP Server —Ä–∞–±–æ—Ç–∞–µ—Ç, Git MCP Server —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            print("  –°—Ç–∞—Ç—É—Å: ‚ùå –û–±–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Ç–æ–∫–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"mcp-test-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager
    setup_pager_protection()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = MCPServerTester()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Git MCP Server
    tester.test_git_mcp_server()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub MCP Server
    tester.test_github_mcp_server()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    tester.generate_report()

if __name__ == "__main__":
    main()
