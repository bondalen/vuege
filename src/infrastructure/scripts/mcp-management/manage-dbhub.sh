#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–º DBHub
# –ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
# –î–∞—Ç–∞: 2025-08-21

DBHUB_DIR="/home/alex/vuege/dbhub"
DSN="postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
PORT=8081
PID_FILE="/tmp/dbhub.pid"
LOG_FILE="$DBHUB_DIR/dbhub.log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== DBHub MCP Server Manager ===${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    if [ ! -d "$DBHUB_DIR" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $DBHUB_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
check_executable() {
    if [ ! -f "$DBHUB_DIR/dist/index.js" ]; then
        print_error "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª $DBHUB_DIR/dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print_warning "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run build"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
check_status() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p $PID > /dev/null 2>&1; then
            print_status "DBHub —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
            return 0
        else
            print_warning "PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        print_status "DBHub —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
start_server() {
    print_header
    check_directory
    check_executable
    
    if check_status; then
        print_warning "–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        return 1
    fi
    
    print_status "–ó–∞–ø—É—Å–∫ DBHub MCP —Å–µ—Ä–≤–µ—Ä–∞..."
    print_status "DSN: $DSN"
    print_status "–ü–æ—Ä—Ç: $PORT"
    print_status "–õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
    
    cd "$DBHUB_DIR"
    nohup node dist/index.js \
        --transport http \
        --port $PORT \
        --dsn "$DSN" \
        > "$LOG_FILE" 2>&1 &
    
    PID=$!
    echo $PID > "$PID_FILE"
    
    sleep 2
    
    if check_status; then
        print_status "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        print_status "üåê HTTP API: http://localhost:$PORT/message"
        print_status "üìù –õ–æ–≥–∏: $LOG_FILE"
    else
        print_error "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!"
        print_status "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $LOG_FILE"
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
stop_server() {
    print_header
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (PID: $PID)..."
        
        if kill $PID 2>/dev/null; then
            print_status "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_warning "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
        fi
        
        rm -f "$PID_FILE"
    else
        print_warning "PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
restart_server() {
    print_header
    stop_server
    sleep 2
    start_server
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
show_logs() {
    print_header
    if [ -f "$LOG_FILE" ]; then
        print_status "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
        echo "----------------------------------------"
        tail -n 50 "$LOG_FILE"
        echo "----------------------------------------"
    else
        print_error "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
test_api() {
    print_header
    print_status "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
    
    if ! check_status; then
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: $0 start"
        return 1
    fi
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print_status "–¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    curl -s -X POST http://localhost:$PORT/message \
        -H "Content-Type: application/json" \
        -H "Accept: application/json, text/event-stream" \
        -d '{
            "jsonrpc":"2.0",
            "id":1,
            "method":"tools/call",
            "params":{
                "name":"execute_sql",
                "arguments":{
                    "sql":"SELECT COUNT(*) as user_count FROM users;"
                }
            }
        }' | jq -r '.result.content[0].text' | jq .
    
    echo ""
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    print_status "–¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    curl -s -X POST http://localhost:$PORT/message \
        -H "Content-Type: application/json" \
        -H "Accept: application/json, text/event-stream" \
        -d '{
            "jsonrpc":"2.0",
            "id":2,
            "method":"tools/call",
            "params":{
                "name":"execute_sql",
                "arguments":{
                    "sql":"SELECT COUNT(*) as product_count FROM products;"
                }
            }
        }' | jq -r '.result.content[0].text' | jq .
    
    print_status "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|test|help}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å DBHub MCP —Å–µ—Ä–≤–µ—Ä"
    echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  test    - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API"
    echo "  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    echo "  DSN: $DSN"
    echo "  –ü–æ—Ä—Ç: $PORT"
    echo "  –õ–æ–≥–∏: $LOG_FILE"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    restart)
        restart_server
        ;;
    status)
        print_header
        check_status
        ;;
    logs)
        show_logs
        ;;
    test)
        test_api
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
