#!/bin/bash

# =============================================================================
# –°–ö–†–ò–ü–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
# –ê–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–¥—É—Ç–æ–≥–æ .git
# =============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ .git
analyze_git_size() {
    log "üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ê .GIT –î–ò–†–ï–ö–¢–û–†–ò–ò"
    
    if [ ! -d ".git" ]; then
        log_error ".git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    # –†–∞–∑–º–µ—Ä .git
    local git_size=$(du -sh .git 2>/dev/null | cut -f1)
    echo "   –†–∞–∑–º–µ—Ä .git: $git_size"
    
    # –†–∞–∑–º–µ—Ä objects
    if [ -d ".git/objects" ]; then
        local objects_size=$(du -sh .git/objects 2>/dev/null | cut -f1)
        echo "   –†–∞–∑–º–µ—Ä objects: $objects_size"
    fi
    
    # –†–∞–∑–º–µ—Ä pack
    if [ -d ".git/objects/pack" ]; then
        local pack_size=$(du -sh .git/objects/pack 2>/dev/null | cut -f1)
        echo "   –†–∞–∑–º–µ—Ä pack: $pack_size"
    fi
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ loose –æ–±—ä–µ–∫—Ç–æ–≤
    local loose_objects=$(find .git/objects -type f -name "??" 2>/dev/null | wc -l)
    echo "   Loose –æ–±—ä–µ–∫—Ç–æ–≤: $loose_objects"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ pack —Ñ–∞–π–ª–æ–≤
    local pack_files=$(find .git/objects/pack -name "*.pack" 2>/dev/null | wc -l)
    echo "   Pack —Ñ–∞–π–ª–æ–≤: $pack_files"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
find_large_files() {
    log "üîç –ü–û–ò–°–ö –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í –í –ò–°–¢–û–†–ò–ò"
    
    echo "   –¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:"
    
    # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ git –¥–æ—Å—Ç—É–ø–µ–Ω)
    if command -v git >/dev/null 2>&1; then
        git rev-list --objects --all 2>/dev/null | \
        git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' 2>/dev/null | \
        sed -n 's/^blob //p' | \
        sort --numeric-sort --key=2 | \
        tail -10 | \
        while read hash size path; do
            local size_mb=$((size / 1024 / 1024))
            if [ "$size_mb" -gt 1 ]; then
                echo "   $size_mb MB: $path"
            fi
        done
    else
        log_warning "Git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Git
analyze_git_objects() {
    log "üìà –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–û–í GIT"
    
    if command -v git >/dev/null 2>&1; then
        echo "   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤:"
        git count-objects -vH 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–∫—Ç–æ–≤"
    else
        log_warning "Git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Git
optimize_git() {
    log "üõ†Ô∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
    
    if ! command -v git >/dev/null 2>&1; then
        log_error "Git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    local backup_dir="git-backup-$(date +%Y%m%d-%H%M%S)"
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ $backup_dir..."
    cp -r .git "$backup_dir" 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
    
    # –£–ø–∞–∫–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    log "–£–ø–∞–∫–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤..."
    git gc --aggressive 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å git gc"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    log "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤..."
    git prune 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å git prune"
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    log "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
    git gc --prune=now --aggressive 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É"
    
    log_success "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
remove_large_files_from_history() {
    log "üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í –ò–ó –ò–°–¢–û–†–ò–ò"
    
    if ! command -v git >/dev/null 2>&1; then
        log_error "Git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    local files_to_remove=(
        "node_modules"
        "target"
        "*.jar"
        "*.war"
        "*.log"
        "*.tmp"
        "*.temp"
        "venv"
        "mcp_cache"
    )
    
    log_warning "–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é Git!"
    log_warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è!"
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return
    fi
    
    for file in "${files_to_remove[@]}"; do
        log "–£–¥–∞–ª–µ–Ω–∏–µ $file –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏..."
        git filter-branch --force --index-filter "git rm --cached --ignore-unmatch -r '$file'" --prune-empty --tag-name-filter cat -- --all 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $file"
    done
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    log "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è..."
    git for-each-ref --format='delete %(refname)' refs/original 2>/dev/null | git update-ref --stdin 2>/dev/null || true
    git reflog expire --expire=now --all 2>/dev/null || true
    git gc --prune=now --aggressive 2>/dev/null || true
    
    log_success "–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è .gitignore
create_gitignore() {
    log "üìù –°–û–ó–î–ê–ù–ò–ï .GITIGNORE"
    
    if [ ! -f ".gitignore" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ .gitignore..."
        touch .gitignore
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    local exclusions=(
        "# Virtual Environment"
        "venv/"
        "env/"
        ".venv/"
        "ENV/"
        ""
        "# Node.js"
        "node_modules/"
        "npm-debug.log*"
        "yarn-debug.log*"
        "yarn-error.log*"
        ""
        "# Maven"
        "target/"
        "*.class"
        "*.jar"
        "*.war"
        "*.ear"
        ""
        "# MCP Cache"
        "mcp_cache/"
        ".mcp_cache/"
        ""
        "# IDE"
        ".vscode/"
        ".idea/"
        ""
        "# Build directories"
        "dist/"
        "build/"
        ""
        "# Temporary files"
        "*.tmp"
        "*.temp"
        "*.log"
        ""
        "# Large files"
        "*.mp3"
        "*.mp4"
        "*.zip"
        "*.tar.gz"
        "*.rar"
        ""
        "# OS"
        ".DS_Store"
        "Thumbs.db"
    )
    
    for exclusion in "${exclusions[@]}"; do
        if [ "$exclusion" = "" ]; then
            echo "" >> .gitignore
        elif ! grep -q "^${exclusion}$" .gitignore 2>/dev/null; then
            echo "$exclusion" >> .gitignore
            log_success "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ .gitignore: $exclusion"
        fi
    done
    
    log_success ".gitignore –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è pre-commit hook
create_pre_commit_hook() {
    log "üîß –°–û–ó–î–ê–ù–ò–ï PRE-COMMIT HOOK"
    
    mkdir -p .git/hooks
    
    cat > ".git/hooks/pre-commit" << 'EOF'
#!/bin/bash

# Pre-commit hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
MAX_FILE_SIZE=10485760  # 10MB

echo "üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–û–í..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
git diff --cached --name-only | while read file; do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
        if [ "$size" -gt "$MAX_FILE_SIZE" ]; then
            echo "‚ùå –§–∞–π–ª $file —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ($size –±–∞–π—Ç)"
            echo "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: $MAX_FILE_SIZE –±–∞–π—Ç"
            exit 1
        fi
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ .git
git_size=$(du -sm .git | cut -f1)
if [ "$git_size" -gt 100 ]; then
    echo "‚ö†Ô∏è  –†–∞–∑–º–µ—Ä .git –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100MB ($git_size MB)"
    echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞"
fi

echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞"
EOF
    
    chmod +x .git/hooks/pre-commit
    log_success "Pre-commit hook —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
full_optimization() {
    log "üöÄ –ü–û–õ–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
    echo "=========================================="
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    analyze_git_size
    echo ""
    
    # 2. –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    find_large_files
    echo ""
    
    # 3. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
    analyze_git_objects
    echo ""
    
    # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    optimize_git
    echo ""
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
    create_gitignore
    echo ""
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ pre-commit hook
    create_pre_commit_hook
    echo ""
    
    # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    log "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó"
    analyze_git_size
    
    log_success "–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "üõ†Ô∏è –°–ö–†–ò–ü–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
    echo "========================================"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --help, -h           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --analyze            –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ .git"
    echo "  --find-large-files   –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  --optimize           –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    echo "  --remove-large       –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
    echo "  --create-gitignore   –°–æ–∑–¥–∞–Ω–∏–µ .gitignore"
    echo "  --create-hook        –°–æ–∑–¥–∞–Ω–∏–µ pre-commit hook"
    echo "  --full-optimization  –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    echo ""
    echo "–ë–µ–∑ –æ–ø—Ü–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --analyze)
            analyze_git_size
            find_large_files
            analyze_git_objects
            exit 0
            ;;
        --find-large-files)
            find_large_files
            exit 0
            ;;
        --optimize)
            optimize_git
            exit 0
            ;;
        --remove-large)
            remove_large_files_from_history
            exit 0
            ;;
        --create-gitignore)
            create_gitignore
            exit 0
            ;;
        --create-hook)
            create_pre_commit_hook
            exit 0
            ;;
        --full-optimization)
            full_optimization
            exit 0
            ;;
        "")
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    echo "üõ†Ô∏è –°–ö–†–ò–ü–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø"
    echo "========================================"
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ .git"
    echo "2. –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    echo "3. –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    echo "4. –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
    echo "5. –°–æ–∑–¥–∞–Ω–∏–µ .gitignore"
    echo "6. –°–æ–∑–¥–∞–Ω–∏–µ pre-commit hook"
    echo "7. –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    echo "0. –í—ã—Ö–æ–¥"
    echo ""
    
    read -p "–í–∞—à –≤—ã–±–æ—Ä (0-7): " choice
    
    case $choice in
        1)
            analyze_git_size
            find_large_files
            analyze_git_objects
            ;;
        2)
            find_large_files
            ;;
        3)
            optimize_git
            ;;
        4)
            remove_large_files_from_history
            ;;
        5)
            create_gitignore
            ;;
        6)
            create_pre_commit_hook
            ;;
        7)
            full_optimization
            ;;
        0)
            log "–í—ã—Ö–æ–¥"
            exit 0
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"