#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub MCP —Å–µ—Ä–≤–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import os
import sys
import json
import requests
from pathlib import Path

def check_github_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å GitHub —Ç–æ–∫–µ–Ω–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
    if not token:
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    if token == "YOUR_GITHUB_TOKEN_HERE":
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (placeholder)")
        return False
    
    print(f"‚úÖ GitHub —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    try:
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        response = requests.get('https://api.github.com/user', headers=headers)
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']}")
            return True
        else:
            print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def check_mcp_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...")
    
    mcp_config_path = Path.home() / '.cursor' / 'mcp.json'
    if not mcp_config_path.exists():
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        with open(mcp_config_path, 'r') as f:
            config = json.load(f)
        
        if 'github-mcp-server' in config.get('mcpServers', {}):
            print("‚úÖ GitHub MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
        else:
            print("‚ùå GitHub MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP: {e}")
        return False

def test_github_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç GitHub API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub API...")
    
    token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
    if not token or token == "YOUR_GITHUB_TOKEN_HERE":
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        response = requests.get('https://api.github.com/user', headers=headers)
        if response.status_code == 200:
            user_data = response.json()
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        response = requests.get('https://api.github.com/user/repos', headers=headers)
        if response.status_code == 200:
            repos = response.json()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é vuege...")
        response = requests.get('https://api.github.com/repos/bondalen/vuege', headers=headers)
        if response.status_code == 200:
            repo_data = response.json()
            print(f"   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_data['full_name']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub MCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_ok = check_github_token()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP
    config_ok = check_mcp_configuration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_github_api()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"GitHub —Ç–æ–∫–µ–Ω: {'‚úÖ' if token_ok else '‚ùå'}")
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"GitHub API: {'‚úÖ' if api_ok else '‚ùå'}")
    
    if token_ok and config_ok and api_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("GitHub MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor IDE")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ GitHub MCP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–∞–Ω–µ–ª–∏ MCP Tools")
    print("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ MCP")

if __name__ == "__main__":
    main()