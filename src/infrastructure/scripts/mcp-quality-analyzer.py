#!/usr/bin/env python3
"""
@file: mcp-quality-analyzer.py
@description: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∑–≤–µ–∑–¥–∞–º, —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dependencies: requests, json, os, sys, asyncio, aiohttp
@created: 2025-01-27
@pager-protection: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç pager
"""

import asyncio
import json
import os
import sys
import subprocess
import requests
from typing import Dict, List, Optional, Tuple
from pathlib import Path
from dataclasses import dataclass
from datetime import datetime, timedelta

def setup_pager_protection():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç pager"""
    os.environ['PAGER'] = 'cat'
    os.environ['LESS'] = '-R -M --shift 5'
    os.environ['MORE'] = '-R'
    os.environ['COMPOSER_NO_INTERACTION'] = '1'
    
    try:
        subprocess.run(['git', 'config', '--global', 'core.pager', 'cat'], 
                      capture_output=True, check=True)
    except subprocess.CalledProcessError:
        pass

setup_pager_protection()

@dataclass
class MCPQualityMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    name: str
    stars: int = 0
    forks: int = 0
    downloads: int = 0
    last_commit: Optional[str] = None
    issues: int = 0
    open_issues: int = 0
    quality_score: float = 0.0
    stability_rating: str = "Unknown"
    recommendation: str = "Unknown"

class MCPQualityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.github_api_base = "https://api.github.com"
        self.npm_api_base = "https://registry.npmjs.org"
        self.pypi_api_base = "https://pypi.org/pypi"
        
    async def analyze_github_repo(self, repo_url: str) -> MCPQualityMetrics:
        """–ê–Ω–∞–ª–∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º owner/repo –∏–∑ URL
            if "github.com" in repo_url:
                parts = repo_url.split("github.com/")[-1].split("/")
                if len(parts) >= 2:
                    owner, repo = parts[0], parts[1].split("#")[0].split("?")[0]
                    
                    # GitHub API –∑–∞–ø—Ä–æ—Å
                    api_url = f"{self.github_api_base}/repos/{owner}/{repo}"
                    response = requests.get(api_url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        metrics = MCPQualityMetrics(
                            name=f"{owner}/{repo}",
                            stars=data.get('stargazers_count', 0),
                            forks=data.get('forks_count', 0),
                            last_commit=data.get('updated_at'),
                            issues=data.get('open_issues_count', 0),
                            open_issues=data.get('open_issues_count', 0)
                        )
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                        metrics.quality_score = self._calculate_quality_score(metrics)
                        metrics.stability_rating = self._get_stability_rating(metrics)
                        metrics.recommendation = self._get_recommendation(metrics)
                        
                        return metrics
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_url}: {e}")
            
        return MCPQualityMetrics(name=repo_url)
    
    async def analyze_npm_package(self, package_name: str) -> MCPQualityMetrics:
        """–ê–Ω–∞–ª–∏–∑ NPM –ø–∞–∫–µ—Ç–∞"""
        try:
            api_url = f"{self.npm_api_base}/{package_name}"
            response = requests.get(api_url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                latest = data.get('dist-tags', {}).get('latest', {})
                version_data = data.get('versions', {}).get(latest, {})
                
                metrics = MCPQualityMetrics(
                    name=package_name,
                    downloads=version_data.get('downloads', 0),
                    last_commit=version_data.get('time', {}).get('modified')
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
                repository = version_data.get('repository', {})
                if repository and 'github.com' in str(repository):
                    github_metrics = await self.analyze_github_repo(str(repository))
                    metrics.stars = github_metrics.stars
                    metrics.forks = github_metrics.forks
                    metrics.issues = github_metrics.issues
                    metrics.open_issues = github_metrics.open_issues
                
                metrics.quality_score = self._calculate_quality_score(metrics)
                metrics.stability_rating = self._get_stability_rating(metrics)
                metrics.recommendation = self._get_recommendation(metrics)
                
                return metrics
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ NPM –ø–∞–∫–µ—Ç–∞ {package_name}: {e}")
            
        return MCPQualityMetrics(name=package_name)
    
    async def analyze_pypi_package(self, package_name: str) -> MCPQualityMetrics:
        """–ê–Ω–∞–ª–∏–∑ PyPI –ø–∞–∫–µ—Ç–∞"""
        try:
            api_url = f"{self.pypi_api_base}/{package_name}/json"
            response = requests.get(api_url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                info = data.get('info', {})
                
                metrics = MCPQualityMetrics(
                    name=package_name,
                    downloads=info.get('downloads', 0),
                    last_commit=info.get('upload_time')
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
                project_urls = info.get('project_urls', {})
                for url in project_urls.values():
                    if 'github.com' in str(url):
                        github_metrics = await self.analyze_github_repo(str(url))
                        metrics.stars = github_metrics.stars
                        metrics.forks = github_metrics.forks
                        metrics.issues = github_metrics.issues
                        metrics.open_issues = github_metrics.open_issues
                        break
                
                metrics.quality_score = self._calculate_quality_score(metrics)
                metrics.stability_rating = self._get_stability_rating(metrics)
                metrics.recommendation = self._get_recommendation(metrics)
                
                return metrics
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PyPI –ø–∞–∫–µ—Ç–∞ {package_name}: {e}")
            
        return MCPQualityMetrics(name=package_name)
    
    def _calculate_quality_score(self, metrics: MCPQualityMetrics) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (0-100)"""
        score = 0.0
        
        # GitHub –º–µ—Ç—Ä–∏–∫–∏ (60% –≤–µ—Å–∞)
        if metrics.stars > 0:
            score += min(metrics.stars / 100, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤ –∑–∞ –∑–≤–µ–∑–¥—ã
        if metrics.forks > 0:
            score += min(metrics.forks / 50, 15)   # –ú–∞–∫—Å–∏–º—É–º 15 –±–∞–ª–ª–æ–≤ –∑–∞ —Ñ–æ—Ä–∫–∏
        if metrics.issues > 0:
            score += min(10 - (metrics.open_issues / metrics.issues * 10), 10)  # –ú–µ–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö issues = –ª—É—á—à–µ
        if metrics.last_commit:
            try:
                last_commit_date = datetime.fromisoformat(metrics.last_commit.replace('Z', '+00:00'))
                days_since = (datetime.now(last_commit_date.tzinfo) - last_commit_date).days
                if days_since < 30:
                    score += 5  # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
                elif days_since < 90:
                    score += 3  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                elif days_since < 365:
                    score += 1  # –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            except:
                pass
        
        # Downloads –º–µ—Ç—Ä–∏–∫–∏ (40% –≤–µ—Å–∞)
        if metrics.downloads > 0:
            score += min(metrics.downloads / 1000, 40)  # –ú–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
        return min(score, 100.0)
    
    def _get_stability_rating(self, metrics: MCPQualityMetrics) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if metrics.quality_score >= 80:
            return "Excellent"
        elif metrics.quality_score >= 60:
            return "Good"
        elif metrics.quality_score >= 40:
            return "Fair"
        elif metrics.quality_score >= 20:
            return "Poor"
        else:
            return "Unknown"
    
    def _get_recommendation(self, metrics: MCPQualityMetrics) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        if metrics.quality_score >= 80:
            return "Strongly Recommended"
        elif metrics.quality_score >= 60:
            return "Recommended"
        elif metrics.quality_score >= 40:
            return "Use with caution"
        elif metrics.quality_score >= 20:
            return "Not recommended"
        else:
            return "Unknown quality"
    
    async def analyze_current_servers(self) -> Dict[str, MCPQualityMetrics]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        servers_to_analyze = {
            "terminal-controller": "terminal-controller-mcp",
            "git-mcp": "git-mcp",
            "github-mcp": "github-mcp",
            "docker-mcp": "docker-mcp",
            "jira-mcp": "jira-mcp",
            "postgres-mcp": "postgres-mcp"
        }
        
        results = {}
        
        for server_name, package_name in servers_to_analyze.items():
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {server_name}...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            metrics = None
            
            # –°–Ω–∞—á–∞–ª–∞ PyPI
            try:
                metrics = await self.analyze_pypi_package(package_name)
                if metrics.quality_score > 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ PyPI")
            except:
                pass
            
            # –ó–∞—Ç–µ–º NPM
            if not metrics or metrics.quality_score == 0:
                try:
                    metrics = await self.analyze_npm_package(package_name)
                    if metrics.quality_score > 0:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ NPM")
                except:
                    pass
            
            # GitHub –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
            if not metrics or metrics.quality_score == 0:
                try:
                    github_url = f"https://github.com/search?q={package_name}+mcp"
                    metrics = await self.analyze_github_repo(github_url)
                except:
                    pass
            
            results[server_name] = metrics or MCPQualityMetrics(name=package_name)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"   –ó–≤–µ–∑–¥—ã: {metrics.stars}")
            print(f"   –°–∫–∞—á–∏–≤–∞–Ω–∏—è: {metrics.downloads}")
            print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {metrics.quality_score:.1f}/100")
            print(f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {metrics.stability_rating}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {metrics.recommendation}")
        
        return results
    
    async def find_better_alternatives(self, current_servers: Dict[str, MCPQualityMetrics]) -> Dict[str, List[MCPQualityMetrics]]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("\nüîç –ò—â–µ–º –ª—É—á—à–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        alternatives = {}
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        problematic_servers = {
            name: metrics for name, metrics in current_servers.items() 
            if metrics.quality_score < 40 or metrics.stability_rating in ["Poor", "Unknown"]
        }
        
        for server_name, metrics in problematic_servers.items():
            print(f"\nüîç –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è {server_name} (–∫–∞—á–µ—Å—Ç–≤–æ: {metrics.quality_score:.1f})...")
            
            # –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
            alternatives[server_name] = []
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            if server_name == "git-mcp":
                alternatives[server_name].extend([
                    await self.analyze_github_repo("https://github.com/modelcontextprotocol/server-git"),
                    await self.analyze_pypi_package("git-mcp-server"),
                ])
            elif server_name == "github-mcp":
                alternatives[server_name].extend([
                    await self.analyze_github_repo("https://github.com/modelcontextprotocol/server-github"),
                    await self.analyze_pypi_package("github-mcp-server"),
                ])
            elif server_name == "terminal-controller":
                alternatives[server_name].extend([
                    await self.analyze_github_repo("https://github.com/rinardnick/mcp-terminal"),
                    await self.analyze_npm_package("@rinardnick/mcp-terminal"),
                ])
        
        return alternatives

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = MCPQualityAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
    current_servers = await analyzer.analyze_current_servers()
    
    # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alternatives = await analyzer.find_better_alternatives(current_servers)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "current_servers": {name: {
            "stars": metrics.stars,
            "downloads": metrics.downloads,
            "quality_score": metrics.quality_score,
            "stability_rating": metrics.stability_rating,
            "recommendation": metrics.recommendation
        } for name, metrics in current_servers.items()},
        "alternatives": {name: [{
            "name": alt.name,
            "stars": alt.stars,
            "downloads": alt.downloads,
            "quality_score": alt.quality_score,
            "stability_rating": alt.stability_rating,
            "recommendation": alt.recommendation
        } for alt in alts] for name, alts in alternatives.items()}
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_file = "mcp_quality_analysis.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for server_name, metrics in current_servers.items():
        if metrics.quality_score < 40:
            print(f"‚ùå {server_name}: –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({metrics.quality_score:.1f}/100)")
            if server_name in alternatives:
                best_alt = max(alternatives[server_name], key=lambda x: x.quality_score)
                print(f"   üí° –õ—É—á—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {best_alt.name} ({best_alt.quality_score:.1f}/100)")
        else:
            print(f"‚úÖ {server_name}: –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({metrics.quality_score:.1f}/100)")

if __name__ == "__main__":
    asyncio.run(main())
