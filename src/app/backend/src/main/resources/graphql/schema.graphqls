# GraphQL схема для Vuege
# CRUD веб-сервис для учета организационных единиц с исторической перспективой и ГИС-функциональностью

scalar Date
scalar GeoPoint

type Query {
    # Основные запросы для организационных единиц
    organizationalUnits: [OrganizationalUnit!]!
    organizationalUnit(id: ID!): OrganizationalUnit
    organizationsByStatus(status: StatusType!): [OrganizationalUnit!]!
    organizationsWithPagination(page: Int!, size: Int!, filters: OrganizationFilter, sort: SortInput): PaginatedResult!
    
    # Запросы для должностей
    positions: [Position!]!
    position(id: ID!): Position
    positionsWithPagination(page: Int!, size: Int!, filters: PositionFilter, sort: SortInput): PaginatedResult!
    
    # Запросы для людей
    persons: [Person!]!
    person(id: ID!): Person
    personsWithPagination(page: Int!, size: Int!, filters: PersonFilter, sort: SortInput): PaginatedResult!
    
    # ГИС запросы
    organizationsInRegion(bounds: BoundingBox!, timeRange: TimeRange!): [OrganizationalUnit!]!
    
    # Исторические запросы
    historicalPeriods: [HistoricalPeriod!]!
    historicalPeriod(id: ID!): HistoricalPeriod
    
    # Поиск и аналитика
    searchOrganizations(query: String!, filters: SearchFilters): SearchResult!
    searchPersons(query: String!, filters: SearchFilters): SearchResult!
    searchPositions(query: String!, filters: SearchFilters): SearchResult!
    
    # Агрегационные запросы
    organizationStats(timeRange: TimeRange!): OrganizationStats!
    personStats(timeRange: TimeRange!): PersonStats!
    positionStats(timeRange: TimeRange!): PositionStats!
    
    # Внешние API запросы
    geocodeAddress(address: String!): GeocodingResult!
    reverseGeocode(latitude: Float!, longitude: Float!): GeocodingResult!
    validateEmail(email: String!): ValidationResult!
    validatePhone(phone: String!): ValidationResult!
    validateAddress(address: String!): ValidationResult!
    enrichCompanyData(companyName: String!): EnrichmentResult!
    enrichByInn(inn: String!): EnrichmentResult!
    checkGeocodingApi: ApiMonitoringResult!
    checkValidationApi: ApiMonitoringResult!
    checkEnrichmentApi: ApiMonitoringResult!
    checkAllApis: [ApiMonitoringResult!]!
    getApiStatistics: ApiStatistics!
}

type Mutation {
    # Мутации для организационных единиц
    createOrganizationalUnit(input: OrganizationalUnitInput!): OrganizationalUnit!
    updateOrganizationalUnit(id: ID!, input: OrganizationalUnitInput!): OrganizationalUnit!
    deleteOrganizationalUnit(id: ID!): Boolean!
    
    # Мутации для должностей
    createPosition(input: PositionInput!): Position!
    updatePosition(id: ID!, input: PositionInput!): Position!
    deletePosition(id: ID!): Boolean!
    
    # Мутации для людей
    createPerson(input: PersonInput!): Person!
    updatePerson(id: ID!, input: PersonInput!): Person!
    deletePerson(id: ID!): Boolean!
    
    # Мутации для связей человек-должность
    assignPersonToPosition(input: PersonPositionInput!): PersonPosition!
    removePersonFromPosition(personId: ID!, positionId: ID!): Boolean!
}

# Основные типы

type OrganizationalUnit {
    id: ID!
    name: String!
    type: OrganizationType!
    status: StatusType!
    foundedDate: Date!
    dissolvedDate: Date
    location: GeoPoint
    isFictional: Boolean!
    historicalPeriod: HistoricalPeriod!
    parentUnit: OrganizationalUnit
    childUnits: [OrganizationalUnit!]!
    positions: [Position!]!
}

type Position {
    id: ID!
    title: String!
    organization: OrganizationalUnit!
    createdDate: Date!
    abolishedDate: Date
    hierarchy: PositionHierarchy!
    responsibilities: [String!]!
    isActive: Boolean!
    holders: [PersonPosition!]!
}

type Person {
    id: ID!
    name: String!
    birthDate: Date
    deathDate: Date
    nationality: String!
    positions: [PersonPosition!]!
    isFictional: Boolean!
    historicalPeriod: HistoricalPeriod!
}

type PersonPosition {
    id: ID!
    person: Person!
    position: Position!
    startDate: Date!
    endDate: Date
    appointmentType: AppointmentType!
    source: String!
}

type HistoricalPeriod {
    id: ID!
    name: String!
    startDate: Date!
    endDate: Date
    era: Era!
    description: String!
}

type GeoPoint {
    id: ID!
    latitude: Float!
    longitude: Float!
    coordinates: [Float!]!
    elevation: Float
    accuracy: AccuracyType!
}

# Типы для внешних API

type GeocodingResult {
    originalAddress: String
    latitude: Float
    longitude: Float
    formattedAddress: String
    country: String
    region: String
    city: String
    postalCode: String
    street: String
    houseNumber: String
    accuracy: String
    responseTime: Int
    createdAt: Date
    source: String
    status: String
    errorMessage: String
}

type ValidationResult {
    originalData: String
    validationType: String
    status: ValidationStatus!
    isValid: Boolean!
    confidence: Int
    formattedData: String
    errors: [String!]
    suggestions: [String!]
    additionalInfo: String
    responseTime: Int
    createdAt: Date
    source: String
}

type EnrichmentResult {
    originalData: String
    enrichmentType: String
    status: EnrichmentStatus!
    enrichedData: [EnrichmentData!]
    confidence: Int
    dataSource: String
    lastUpdated: Date
    responseTime: Int
    createdAt: Date
    errorMessage: String
}

type EnrichmentData {
    key: String!
    value: String
}

type ApiMonitoringResult {
    apiName: String!
    endpoint: String
    status: ApiStatus!
    responseTime: Int
    httpStatusCode: Int
    lastChecked: Date
    successCount: Int
    errorCount: Int
    successRate: Float
    errorMessage: String
}

type ApiStatistics {
    geocoding: ApiStats
    validation: ApiStats
    enrichment: ApiStats
}

type ApiStats {
    successCount: Int!
    errorCount: Int!
    successRate: Float!
}

# Enum типы

enum OrganizationType {
    STATE
    GOVERNMENT
    COMMERCIAL
}

enum PositionHierarchy {
    EXECUTIVE
    LEGISLATIVE
    JUDICIAL
    ADMINISTRATIVE
    OPERATIONAL
}

enum AppointmentType {
    ELECTED
    APPOINTED
    INHERITED
}

enum Era {
    BCE
    CE
}

enum AccuracyType {
    EXACT
    APPROXIMATE
    UNKNOWN
}

enum ValidationStatus {
    VALID
    INVALID
    UNKNOWN
    ERROR
}

enum EnrichmentStatus {
    SUCCESS
    PARTIAL
    NOT_FOUND
    ERROR
}

enum ApiStatus {
    UP
    DOWN
    DEGRADED
    UNKNOWN
}

# Input типы

input OrganizationalUnitInput {
    name: String!
    type: OrganizationType!
    foundedDate: Date!
    dissolvedDate: Date
    location: GeoPointInput
    isFictional: Boolean!
    historicalPeriodId: ID!
    parentUnitId: ID
}

input PositionInput {
    title: String!
    organizationId: ID!
    createdDate: Date!
    abolishedDate: Date
    hierarchy: PositionHierarchy!
    responsibilities: [String!]!
    isActive: Boolean!
}

input PersonInput {
    name: String!
    birthDate: Date
    deathDate: Date
    nationality: String!
    isFictional: Boolean!
    historicalPeriodId: ID!
}

input PersonPositionInput {
    personId: ID!
    positionId: ID!
    startDate: Date!
    endDate: Date
    appointmentType: AppointmentType!
    source: String!
}

input GeoPointInput {
    latitude: Float!
    longitude: Float!
    elevation: Float
    accuracy: AccuracyType!
}

input BoundingBox {
    north: Float!
    south: Float!
    east: Float!
    west: Float!
}

input TimeRange {
    startDate: Date!
    endDate: Date
}

type TimeRangeOutput {
    startDate: Date!
    endDate: Date
}

# Расширенные типы для пагинации и фильтрации
type PaginatedResult {
    items: [Any!]!
    totalCount: Int!
    page: Int!
    size: Int!
    totalPages: Int!
    hasNext: Boolean!
    hasPrevious: Boolean!
}

type SearchResult {
    items: [Any!]!
    totalCount: Int!
    query: String!
    filters: SearchFiltersOutput
    executionTime: Int!
}

type OrganizationStats {
    totalCount: Int!
    activeCount: Int!
    dissolvedCount: Int!
    byType: [TypeStats!]!
    byStatus: [StatusStats!]!
    createdInPeriod: Int!
    dissolvedInPeriod: Int!
}

type PersonStats {
    totalCount: Int!
    activeCount: Int!
    byNationality: [NationalityStats!]!
    byPosition: [PositionStats!]!
    averageAge: Float!
}

type PositionStats {
    totalCount: Int!
    activeCount: Int!
    byHierarchy: [HierarchyStats!]!
    byOrganization: [OrganizationStats!]!
    averageSalary: Float!
}

type TypeStats {
    type: OrganizationType!
    count: Int!
}

type StatusStats {
    status: StatusType!
    count: Int!
}

type NationalityStats {
    nationality: String!
    count: Int!
}

type HierarchyStats {
    hierarchy: PositionHierarchy!
    count: Int!
}

# Вспомогательные типы
input OrganizationFilter {
    name: String
    type: OrganizationType
    status: StatusType
    foundedDate: Date
    dissolvedDate: Date
}

input PositionFilter {
    title: String
    hierarchy: PositionHierarchy
    isActive: Boolean
}

input PersonFilter {
    name: String
    nationality: String
    isFictional: Boolean
}

input SearchFilters {
    type: String
    status: String
    dateRange: TimeRange
}

type SearchFiltersOutput {
    type: String
    status: String
    dateRange: TimeRangeOutput
}

input SortInput {
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

enum StatusType {
    ACTIVE
    DISSOLVED
    SUSPENDED
}

scalar Any